  package com.company;

  import com.company.helper.Helper;
  import org.graphwalker.core.machine.ExecutionContext;
  import org.graphwalker.java.annotation.AfterExecution;
  import org.graphwalker.java.annotation.GraphWalker;

  import org.openqa.selenium.support.ui.ExpectedConditions;
  import org.openqa.selenium.By;
  import static org.junit.Assert.assertEquals;

  /**
 * See: http://graphwalker.org/docs/maven_archetype for more details
 * <p/>
 * Implements the GraphWalker model: src/main/resources/SmallTest.graphml
 * The SmallTest.graphml can be opened and edited using http://www.yworks.com/en/products/yfiles/yed/
 * <p/>
 * For convienicene, a jpg image exists side-by-side in the same folder.
 * <p/>
 * The @GraphWalker annotation, has the following meaning:
 * 1) value defines the generator of this test. Please read more
 * on the subject at: http://graphwalker.org/docs/path_generators_and_stop_conditions
 * 2) start defines the first element in the model to be executed. (Element is
 * either a vertex or an edge)
 * <p/>
 * The interface SmallTest, that SomeSmallTest implements, is generated by
 * running: mvn graphwalker:generate-sources
 * also: mvn graphwalker:test
 */
  @GraphWalker(value = "random(edge_coverage(100))", start = "e_StartBrowser")
  public class SomeSmallTests extends ExecutionContext implements SmallTestInterface {

    @AfterExecution
    public void tearDown() {
      Helper.tearDown();
    }


      @Override
      public void e_StartBrowser() {
        System.out.println("Running: e_StartBrowser");
          Helper.getInstance().get("https://www.amazon.com");
      }

      @Override
      public void v_Home() {
          System.out.println("Running: v_Home");
          assertEquals("Amazon", Helper.getWaiter().until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("span.nav-logo-base.nav-sprite"))).getText());
      }

      @Override
      public void e_Deals() {
          System.out.println("Running: e_Deals");
          Helper.getWaiter().until(ExpectedConditions.visibilityOfElementLocated(By.linkText("Today's Deals"))).click();
      }

      @Override
      public void v_Deals() {
          System.out.println("Running: v_Deals");
          assertEquals("Today's Deals", Helper.getWaiter().until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div.gbh1-bold"))).getText());
      }

      @Override
      public void e_Watch() {
          System.out.println("Running: e_Watching");
          Helper.getWaiter().until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@id='nav-subnav']/a[2]/span"))).click();
      }

      @Override
      public void e_Coupons() {
          System.out.println("Running: e_Coupons");
          Helper.getWaiter().until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@id='nav-subnav']/a[3]/span"))).click();
      }

      @Override
      public void e_Outlet() {
          System.out.println("Running: e_Outlet");
          Helper.getWaiter().until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@id='nav-subnav']/a[4]/span"))).click();
      }

      @Override
      public void v_DealsWatching() {
          System.out.println("Running: v_DealsWatching");
          assertEquals("Deals You're Watching", Helper.getWaiter().until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("div.gbh1-bold"))).getText());
      }

      @Override
      public void v_Coupons() {
          System.out.println("Running: v_Coupons");
          assertEquals("Coupons", Helper.getWaiter().until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("#vpc_coupon_bar_unsigned_in > span.a-size-large.coupon_bar_text"))).getText());
      }

      @Override
      public void v_Outlet() {
          System.out.println("Running: v_Outlet");
          assertEquals("Outlet", Helper.getWaiter().until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("h1"))).getText());
      }
  }
